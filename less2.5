#Lesson 2.5 Udacity class Fall 2016

### Next Day procedure

###
### Define a simple nextDay procedure, that assumes
### every month has 30 days.
###
### For example:
###    nextDay(1999, 12, 30) => (2000, 1, 1)
###    nextDay(2013, 1, 30) => (2013, 2, 1)
###    nextDay(2012, 12, 30) => (2013, 1, 1)  (even though December really has 31 days)
###

def nextDay(year, month, day):
    """
    Returns the year, month, day of the next day.
    Simple version: assume every month has 30 days.
    """
    # YOUR CODE HERE
    if day == 30 and month == 12:
        year = year+1
    if month<12 and day==30:
        month = month + 1   
    if month == 12 and day==30:
        month = 1
    if day<30:
        day = day + 1
    if day == 30:
        day=1
    
    return year, month, day

#udacity answer
def nextDay(year, month, day):
  if day<30:
    return year, month, day+1
    else:
      if month<12:
      return year, month+1, 1
      else:
        return year+1, 1, 1
        
# test cases
print nextDay(1999,12,30)
print nextDay(2013,1,30)
print nextDay(2012,12,30)
print nextDay(2012,1,1)
print nextDay(2012,12,1)

################daysbetweendates

##Nested inverse of correct way??
# Define a daysBetweenDates procedure that would produce the
# correct output if there was a correct nextDay procedure.
#
# Note that this will NOT produce correct outputs yet, since
# our nextDay procedure assumes all months have 30 days
# (hence a year is 360 days, instead of 365).
# Define a daysBetweenDates procedure that would produce the
# correct output if there was a correct nextDay procedure.
#
# Note that this will NOT produce correct outputs yet, since
# our nextDay procedure assumes all months have 30 days
# (hence a year is 360 days, instead of 365).
# 

def nextDay(year, month, day):
    """Simple version: assume every month has 30 days"""
    if day < 30:
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1
        
def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar, and the first date is not after
       the second."""
        
    # YOUR CODE HERE!
    days=0
    year1,month1,day1=nextDay(year1,month1,day1)
    lastmonth=month2
    while year1<year2:
        days=days+1
        year1,month1,day1=nextDay(year1,month1,day1)
    while year1==year2 and month1<month2:
        days=days+1
        year1,month1,day1=nextDay(year1,month1,day1)
    while year1==year2 and month1==month2 and day1<=day2:
        days=days+1
        year1,month1,day1=nextDay(year1,month1,day1)
    return days

print daysBetweenDates(2012,9,15,2013,10,15)#390
print daysBetweenDates(2012,9,15,2012,10,15)#30
print daysBetweenDates(2012,9,30,2012,10,30)#30
print daysBetweenDates(2012,9,1,2012,9,4)#3
print daysBetweenDates(2012,1,1,2013,1,1)#360

def test():
    test_cases = [((2012,9,30,2012,10,30),30), 
                  ((2012,1,1,2013,1,1),360),
                  ((2012,9,1,2012,9,4),3)]
    
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed"
        else:
            print "Test case passed!"

test()
    
####Using helper function

# 

def nextDay(year, month, day):
    """Simple version: assume every month has 30 days"""
    if day < 30:
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1
 
def dateIsBefore(year1, month1, day1, year2, month2, day2):
    if year1<year2:
        return 1
    if year1==year2 and month1<month2:
        return 1
    if year1==year2 and month1==month2 and day1<day2:
        return 1
        
def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar, and the first date is not after
       the second."""
        
    # YOUR CODE HERE!

    days=0
    while dateIsBefore(year1, month1, day1, year2, month2, day2):
        days=days+1
        year1,month1,day1=nextDay(year1,month1,day1)
    return days

print daysBetweenDates(2012,9,15,2013,10,15)#390
print daysBetweenDates(2012,9,15,2012,10,15)#30
print daysBetweenDates(2012,9,30,2012,10,30)#30
print daysBetweenDates(2012,9,1,2012,9,4)#3
print daysBetweenDates(2012,1,1,2013,1,1)#360

def test():
    test_cases = [((2012,9,30,2012,10,30),30), 
                  ((2012,1,1,2013,1,1),360),
                  ((2012,9,1,2012,9,4),3)]
    
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed"
        else:
            print "Test case passed!"

test()
    
#####assertion for invalid input

# Credit goes to Websten from forums
#
# Program defensively:
#
# What do you do if your input is invalid? For example what should
# happen when date 1 is not before date 2?
#
# Add an assertion to the code for daysBetweenDates to give
# an assertion failure when the inputs are invalid. This should
# occur when the first date is not before the second date.
#  

def nextDay(year, month, day):
    """Simple version: assume every month has 30 days"""
    if day < 30:
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1
        
def dateIsBefore(year1, month1, day1, year2, month2, day2):
    if year1<year2:
        return 1
    if year1==year2 and month1<month2:
        return 1
    if year1==year2 and month1==month2 and day1<day2:
        return 1      

def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar."""
    # program defensively! Add an assertion if the input is not valid!
    assert not dateIsBefore(year2, month2, day2, year1, month1, day1)
    days = 0
    while dateIsBefore(year1, month1, day1, year2, month2, day2):
        year1, month1, day1 = nextDay(year1, month1, day1)
        days += 1
    return days

#print daysBetweenDates(2012,9,30,2012,10,30)

def test():
    test_cases = [((2012,9,30,2012,10,30),30), 
                  ((2012,1,1,2013,1,1),360),
                  ((2012,9,1,2012,9,4),3),
                  ((2013,1,1,1999,12,31), "AssertionError")]
    
    for (args, answer) in test_cases:
        try:
            result = daysBetweenDates(*args)
            if result != answer:
                print "Test with data:", args, "failed"
            else:
                print "Test case passed!"
        except AssertionError:
            if answer == "AssertionError":
                print "Nice job! Test case {0} correctly raises AssertionError!\n".format(args)
            else:
                print "Check your work! Test case {0} should not raise AssertionError!\n".format(args)            
test()

########daysInMonth function
def daysInMonth(month1):
    if month1 in [4,6,9,11]:
        return 30
    if month1 == 2:
        return 28
    if month1 in (1,3,5,7,8,10,12):
        return 31

print 'DIM test start'
print daysInMonth(5) 
print daysInMonth(9)
print daysInMonth(2)
print 'DIM test end'

####################final solution
# Credit goes to Websten from forums
#
# Use Dave's suggestions to finish your daysBetweenDates
# procedure. It will need to take into account leap years
# in addition to the correct number of days in each month.

#In the Gregorian calendar 3 criteria must be taken into account to identify leap years:
#1 The year is evenly divisible by 4;
#2 If the year can be evenly divided by 100, it is NOT a leap year, unless;
#3 The year is also evenly divisible by 400. Then it is a leap year. 

def isLeapYear(year):
    """Returns True if it is a leap year"""
    if (year % 4 == 0) and (year % 400 == 0):
        return True
    if (year % 4 == 0) and (year % 100 != 0):
        return True
    else:
        return False

print 'isLeapYear test start'
print isLeapYear(2016) #true
print isLeapYear(2015) #false
print isLeapYear(2000) #true
print 'test end'


def daysInMonth(month1,year1):
    """Returns number of days in month1"""
    if month1 in [4,6,9,11]:
        return 30
    if month1 in (1,3,5,7,8,10,12):
        return 31
    while month1 == 2:
        if isLeapYear(year1) == False:
            return 28
        else:
            return 29

print 'DIM test start'
print daysInMonth(5,2016) #31
print daysInMonth(9,2016) #30
print daysInMonth(2,2016) #29
print 'DIM test end'

def nextDay(year, month, day):
    """Returns next date using daysInMonth function"""
    if day < daysInMonth(month,year):
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1

print nextDay(1999,12,31) #2000,1,1
print nextDay(1900,1,1) #1900,1,2
print nextDay(2016,2,28) #2016,2,29
print nextDay(2012,9,15) #2012,9,16
        
def dateIsBefore(year1, month1, day1, year2, month2, day2):
    """Returns True if year1-month1-day1 is before year2-month2-day2. Otherwise, returns False."""
    if year1 < year2:
        return True
    if year1 == year2:
        if month1 < month2:
            return True
        if month1 == month2:
            return day1 < day2
    return False        

def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar."""
    # program defensively! Add an assertion if the input is not valid!
    assert not dateIsBefore(year2, month2, day2, year1, month1, day1)
    days = 0
    while dateIsBefore(year1, month1, day1, year2, month2, day2):
        year1, month1, day1 = nextDay(year1, month1, day1)
        days += 1
    return days

print daysBetweenDates(2012,9,15,2013,10,15)#395
print daysBetweenDates(2012,9,15,2012,10,15)#30
print daysBetweenDates(2012,9,30,2012,10,30)#30
print daysBetweenDates(2012,9,1,2012,9,4)#3
print daysBetweenDates(2012,1,1,2013,1,1)#365
print daysBetweenDates(2012,1,1,2012,2,28)#58
print daysBetweenDates(2012,1,1,2012,3,1)#60
print daysBetweenDates(2011,6,30,2012,6,30)#366
print daysBetweenDates(2011,1,1,2012,8,8)#585
print daysBetweenDates(1900,1,1,1999,12,31)#36523


def test():
    test_cases = [((2012,1,1,2012,2,28), 58), 
                  ((2012,1,1,2012,3,1), 60),
                  ((2011,6,30,2012,6,30), 366),
                  ((2011,1,1,2012,8,8), 585 ),
                  ((1900,1,1,1999,12,31), 36523)]
    
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed"
        else:
            print "Test case passed!"

test()

  
