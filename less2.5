#Lesson 2.5 Udacity class Fall 2016

### Next Day procedure

###
### Define a simple nextDay procedure, that assumes
### every month has 30 days.
###
### For example:
###    nextDay(1999, 12, 30) => (2000, 1, 1)
###    nextDay(2013, 1, 30) => (2013, 2, 1)
###    nextDay(2012, 12, 30) => (2013, 1, 1)  (even though December really has 31 days)
###

def nextDay(year, month, day):
    """
    Returns the year, month, day of the next day.
    Simple version: assume every month has 30 days.
    """
    # YOUR CODE HERE
    if day == 30 and month == 12:
        year = year+1
    if month<12 and day==30:
        month = month + 1   
    if month == 12 and day==30:
        month = 1
    if day<30:
        day = day + 1
    if day == 30:
        day=1
    
    return year, month, day

#udacity answer
def nextDay(year, month, day):
  if day<30:
    return year, month, day+1
    else:
      if month<12:
      return year, month+1, 1
      else:
        return year+1, 1, 1
        
# test cases
print nextDay(1999,12,30)
print nextDay(2013,1,30)
print nextDay(2012,12,30)
print nextDay(2012,1,1)
print nextDay(2012,12,1)

################daysbetweendates

##Nested inverse of correct way??
# Define a daysBetweenDates procedure that would produce the
# correct output if there was a correct nextDay procedure.
#
# Note that this will NOT produce correct outputs yet, since
# our nextDay procedure assumes all months have 30 days
# (hence a year is 360 days, instead of 365).
# 

def nextDay(year, month, day):
    """Simple version: assume every month has 30 days"""
    if day < 30:
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1
        
def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar, and the first date is not after
       the second."""
        
    # YOUR CODE HERE!
    days=1
    year1,month1,day1=nextDay(year1,month1,day1)
    while day1<30 and day1!=(day2):
        days=days+1
        day1=days
        while month1 < month2 and day1!=(day2):
            days=days+1
            month1=month1+1
            day1=1
            while year1 <year2 and month1 !=13:
                days=days+1
                month1=month1+1
                day1=1
    return days

print daysBetweenDates(2012,9,30,2012,10,30)
print daysBetweenDates(2012,9,1,2012,9,4)
print daysBetweenDates(2012,1,1,2013,1,1)

def test():
    test_cases = [((2012,9,30,2012,10,30),30), 
                  ((2012,1,1,2013,1,1),360),
                  ((2012,9,1,2012,9,4),3)]
    
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed"
        else:
            print "Test case passed!"

test()
